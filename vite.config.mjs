import { defineConfig } from "vite";
import { svelte } from "@sveltejs/vite-plugin-svelte";
import { resolve, dirname } from "path";
import { fileURLToPath } from "url";
import string from "vite-plugin-string";
import { copyFileSync, existsSync, rmSync } from "fs";

const __dirname = dirname(fileURLToPath(import.meta.url));

export default defineConfig(({ command }) => ({
	plugins: [
		svelte({
			preprocess: {
				scss: {
					includePaths: ["src"],
				},
			},
			compilerOptions: {
				dev: command === "serve",
				runes: true,
			},
		}),
		string({
			include: ["**/*.md"],
			exclude: ["node_modules/**"],
		}),
		// Custom plugin to handle file copying
		{
			name: "obsidian-plugin-copy",
			writeBundle() {
				const filesToCopy = [
					{ from: "dist/main.cjs", to: "main.js" },
					{ from: "dist/styles.css", to: "styles.css" },
				];

				for (const file of filesToCopy) {
					if (existsSync(file.from)) {
						copyFileSync(file.from, file.to);
					}
				}

				// Clean up dist directory
				if (existsSync("dist")) {
					rmSync("dist", { recursive: true, force: true });
				}
			},
		},
	],
	build: {
		outDir: "dist",
		lib: {
			entry: resolve(__dirname, "src/main.ts"),
			name: "ObsidianAdvancedTemplatePlugin",
			fileName: "main",
			formats: ["cjs"],
		},
		define: {
			"process.env.NODE_ENV": JSON.stringify(
				command === "build" ? "production" : "development",
			),
		},
		rollupOptions: {
			external: [
				"obsidian",
				"electron",
				"@codemirror/autocomplete",
				"@codemirror/collab",
				"@codemirror/commands",
				"@codemirror/language",
				"@codemirror/lint",
				"@codemirror/search",
				"@codemirror/state",
				"@codemirror/view",
				"@lezer/common",
				"@lezer/highlight",
				"@lezer/lr",
			],
			output: {
				banner: `/*
THIS IS A GENERATED/BUNDLED FILE BY VITE
if you want to view the source, please visit the github repository of this plugin
*/`,
				assetFileNames: "styles.css",
			},
		},
		target: "es2018",
		minify: command === "build",
		sourcemap: command === "serve",
		cssCodeSplit: false,
	},
	resolve: {
		alias: {
			"@": resolve(__dirname, "src"),
		},
	},
}));
